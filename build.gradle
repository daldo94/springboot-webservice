buildscript {
    ext{
        springBootVersion = '2.1.9.RELEASE'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {url "https://plugins.gradle.org/m2/"} //plugin 저장소
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE" //gradle plugin 관리
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}") //querydsl 플러그인 의존성 등록
    }
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.ewerk.gradle.plugins.querydsl"

group 'com.example.boot'
version '1.0.1-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    //web
    compile('org.springframework.boot:spring-boot-starter-web')

    //test
    testCompile('org.springframework.boot:spring-boot-starter-test')

    //lombok
    compile('org.projectlombok:lombok')

    //lombok setting for gradle5
    testCompile('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')

    //JPA
    compile('org.springframework.boot:spring-boot-starter-data-jpa')

    //Inmemory DB H2
    compile('com.h2database:h2')

    //Mustache(Template Engine)
    compile('org.springframework.boot:spring-boot-starter-mustache')

    //querydsl
    compile("com.querydsl:querydsl-jpa")
    compile("com.querydsl:querydsl-apt")
    
    //spring security
    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
    //spring security test
    testCompile('org.springframework.security:spring-security-test')
    
    //session-jdbc
    compile('org.springframework.session:spring-session-jdbc')

    //maria-db
    compile('org.mariadb.jdbc:mariadb-java-client')
}
//querydsl setting start
def querydslSrcDir = 'src/main/generated'

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}
//querydsl setting end
